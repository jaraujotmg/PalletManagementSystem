<!-- src/PalletManagementSystem.Web/Views/Items/Edit.cshtml -->
@model PalletManagementSystem.Web.ViewModels.Items.ItemEditViewModel

@{
    ViewBag.Title = "Edit Item - " + Model.ItemNumber;
}

<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")"><i class="fas fa-home"></i> Home</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Pallets")"><i class="fas fa-pallet"></i> Pallets</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Details", "Pallets", new { id = Model.PalletId })">@Model.PalletNumber</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Details", "Items", new { id = Model.ItemId })">Item #@Model.ItemNumber</a></li>
        <li class="breadcrumb-item active" aria-current="page">Edit</li>
    </ol>
</nav>

<!-- Edit Header -->
<div class="edit-header">
    <div class="row align-items-center">
        <div class="col-md-8">
            <h4><i class="fas fa-edit mr-2"></i>Edit Item #@Model.ItemNumber</h4>
            <div class="mt-2">
                <span class="badge badge-secondary mr-2">Pallet: @Model.PalletNumber</span>
                @if (Model.IsPalletClosed)
                {
                        <span class="badge badge-success">Closed</span>
                }
                else
                {
                        <span class="badge badge-orange">Open</span>
                }
            </div>
        </div>
        <div class="col-md-4 text-md-right mt-3 mt-md-0">
            <div class="custom-control custom-switch d-inline-block mr-3">
                <input type="checkbox" class="custom-control-input" id="touchModeSwitch" @(Model.EnableTouchMode ? "checked" : "")>
                <label class="custom-control-label text-dark" for="touchModeSwitch">Touch Mode</label>
            </div>
        </div>
    </div>
</div>

<!-- Edit Form -->
<div class="card">
    <div class="card-header">
        <i class="fas fa-weight mr-2"></i>Edit Physical Properties
        <span class="badge badge-info float-right">Only these fields can be edited</span>
    </div>
    <div class="card-body">
        <div class="alert alert-warning">
            <i class="fas fa-info-circle mr-2"></i>Note: Only Weight, Width, Quality, and Batch can be edited. Other item properties are not editable.
        </div>

        @using (Html.BeginForm("Edit", "Items", FormMethod.Post, new { id = "editItemForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
            @Html.HiddenFor(m => m.ItemId)
            @Html.HiddenFor(m => m.ItemNumber)
            @Html.HiddenFor(m => m.PalletId)
            @Html.HiddenFor(m => m.PalletNumber)
            @Html.HiddenFor(m => m.ReturnUrl)
            @Html.HiddenFor(m => m.WeightUnit)
            @Html.HiddenFor(m => m.WidthUnit)

                <div class="row">
                    <!-- Item Information (Non-editable) -->
                    <div class="col-lg-4">
                        <div class="card">
                            <div class="card-header">Item Information (Non-editable)</div>
                            <div class="card-body">
                                <div class="form-group">
                                    <label class="form-label">Item Number</label>
                                    <input type="text" class="form-control non-editable-field" value="@Model.ItemNumber" disabled>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Manufacturing Order</label>
                                    <input type="text" class="form-control non-editable-field" value="@Model.ManufacturingOrder" disabled>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Client</label>
                                    <input type="text" class="form-control non-editable-field" value="@Model.ClientName" disabled>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Reference</label>
                                    <input type="text" class="form-control non-editable-field" value="@Model.Reference" disabled>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Editable Properties -->
                    <div class="col-lg-8">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Weight" class="form-label required">Weight</label>
                                    <div class="input-group">
                                    @Html.TextBoxFor(m => m.Weight, new { @class = "form-control" + (Model.EnableTouchMode ? " touch-input" : ""), type = "number", min = "0", step = "0.1" })
                                        <div class="input-group-append">
                                            <span class="input-group-text">@Model.WeightUnit</span>
                                        </div>
                                    </div>
                                @Html.ValidationMessageFor(m => m.Weight, "", new { @class = "text-danger" })
                                    <div class="field-info">
                                        <i class="fas fa-info-circle mr-1"></i>Enter the weight in @(Model.WeightUnit == "KG" ? "kilograms" : "pounds") (positive number)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Width" class="form-label required">Width</label>
                                    <div class="input-group">
                                    @Html.TextBoxFor(m => m.Width, new { @class = "form-control" + (Model.EnableTouchMode ? " touch-input" : ""), type = "number", min = "0", step = "0.1" })
                                        <div class="input-group-append">
                                            <span class="input-group-text">@Model.WidthUnit</span>
                                        </div>
                                    </div>
                                @Html.ValidationMessageFor(m => m.Width, "", new { @class = "text-danger" })
                                    <div class="field-info">
                                        <i class="fas fa-info-circle mr-1"></i>Enter the width in @(Model.WidthUnit == "CM" ? "centimeters" : "inches") (positive number)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Quality" class="form-label required">Quality</label>
                                @Html.DropDownListFor(m => m.Quality, new List<SelectListItem>
                                {
                                    new SelectListItem { Text = "Premium", Value = "Premium" },
                                    new SelectListItem { Text = "Standard", Value = "Standard" },
                                    new SelectListItem { Text = "Economy", Value = "Economy" },
                                    new SelectListItem { Text = "Special", Value = "Special" }
                                }, new { @class = "form-control" + (Model.EnableTouchMode ? " touch-input" : "") })
                                @Html.ValidationMessageFor(m => m.Quality, "", new { @class = "text-danger" })
                                    <div class="field-info">
                                        <i class="fas fa-info-circle mr-1"></i>Select the quality grade for this item
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Batch" class="form-label required">Batch</label>
                                @Html.TextBoxFor(m => m.Batch, new { @class = "form-control" + (Model.EnableTouchMode ? " touch-input" : "") })
                                @Html.ValidationMessageFor(m => m.Batch, "", new { @class = "text-danger" })
                                    <div class="field-info">
                                        <i class="fas fa-info-circle mr-1"></i>Enter the batch number/identifier
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Touch Mode Keyboard (initially hidden) -->
                        <div id="touchKeyboard" class="mt-4" style="display: none;">
                            <div class="card">
                                <div class="card-header">Numeric Keypad</div>
                                <div class="card-body">
                                    <div class="num-keypad">
                                        <button type="button" class="btn num-key" data-value="1">1</button>
                                        <button type="button" class="btn num-key" data-value="2">2</button>
                                        <button type="button" class="btn num-key" data-value="3">3</button>
                                        <button type="button" class="btn num-key" data-value="4">4</button>
                                        <button type="button" class="btn num-key" data-value="5">5</button>
                                        <button type="button" class="btn num-key" data-value="6">6</button>
                                        <button type="button" class="btn num-key" data-value="7">7</button>
                                        <button type="button" class="btn num-key" data-value="8">8</button>
                                        <button type="button" class="btn num-key" data-value="9">9</button>
                                        <button type="button" class="btn num-key" data-value=".">.</button>
                                        <button type="button" class="btn num-key" data-value="0">0</button>
                                        <button type="button" class="btn num-key btn-danger" data-value="del">
                                            <i class="fas fa-backspace"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-end mt-4">
                    <a href="@Model.ReturnUrl" class="btn btn-secondary mr-2" id="cancelButton">
                        <i class="fas fa-times mr-1"></i>Cancel
                    </a>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save mr-1"></i>Save Changes
                    </button>
                </div>
        }
    </div>
</div>

<!-- Unsaved Changes Modal -->
<div class="modal fade" id="unsavedChangesModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fas fa-exclamation-triangle mr-2"></i>Unsaved Changes</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>You have unsaved changes. Are you sure you want to leave this page?</p>
                <p>Any unsaved changes will be lost.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Stay on Page</button>
                <button type="button" class="btn btn-danger" id="confirmLeave">Leave Page</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
        <script>
            // Toggle touch mode - IE11 compatible
            document.getElementById('touchModeSwitch').addEventListener('click', function() {
                var inputs = document.querySelectorAll('input[type="number"], input[type="text"], select');
                var touchKeyboard = document.getElementById('touchKeyboard');

                if (this.checked) {
                    // Enable touch mode
                    for (var i = 0; i < inputs.length; i++) {
                        inputs[i].classList.add('touch-input');
                    }
                    touchKeyboard.style.display = 'block';
                } else {
                    // Disable touch mode
                    for (var i = 0; i < inputs.length; i++) {
                        inputs[i].classList.remove('touch-input');
                    }
                    touchKeyboard.style.display = 'none';
                }
            });

            // Initialize touch mode on page load
            (function() {
                var touchModeSwitch = document.getElementById('touchModeSwitch');
                if (touchModeSwitch.checked) {
                    var inputs = document.querySelectorAll('input[type="number"], input[type="text"], select');
                    var touchKeyboard = document.getElementById('touchKeyboard');

                    for (var i = 0; i < inputs.length; i++) {
                        inputs[i].classList.add('touch-input');
                    }
                    touchKeyboard.style.display = 'block';
                }
            })();

            // Track form changes
            var formChanged = false;
            var form = document.getElementById('editItemForm');
            var inputs = form.querySelectorAll('input, select');

            for (var i = 0; i < inputs.length; i++) {
                inputs[i].addEventListener('change', function() {
                    formChanged = true;
                });
            }

            // Cancel button handling
            document.getElementById('cancelButton').addEventListener('click', function(e) {
                if (formChanged) {
                    e.preventDefault();
                    // Show confirmation modal using jQuery for IE11 compatibility
                    $('#unsavedChangesModal').modal('show');
                }
            });

            // Confirm leave button
            document.getElementById('confirmLeave').addEventListener('click', function() {
                window.location.href = document.getElementById('cancelButton').getAttribute('href');
            });

            // Touch keyboard functionality
            var numKeys = document.querySelectorAll('.num-key');
            var activeInput = null;

            // Set focus event for numeric inputs
            var numericInputs = document.querySelectorAll('input[type="number"], input[type="text"]');
            for (var i = 0; i < numericInputs.length; i++) {
                numericInputs[i].addEventListener('focus', function() {
                    activeInput = this;
                });
            }

            // Handle numeric keypad clicks
            for (var i = 0; i < numKeys.length; i++) {
                numKeys[i].addEventListener('click', function() {
                    if (!activeInput) return;

                    var value = this.getAttribute('data-value');

                    if (value === 'del') {
                        // Delete last character
                        activeInput.value = activeInput.value.slice(0, -1);
                    } else {
                        // Add character
                        activeInput.value += value;
                    }

                    // Trigger change event to track form changes
                    var event = document.createEvent('Event');
                    event.initEvent('change', true, true);
                    activeInput.dispatchEvent(event);
                });
            }
        </script>
}

@section styles {
        <style>
            .badge-orange {
                background-color: #f57c00;
                color: white;
            }

            .edit-header {
                background-color: #e6eef5;
                border-radius: 8px;
                padding: 20px;
                margin-bottom: 20px;
            }

            .edit-header h4 {
                color: #003366;
                margin-bottom: 0;
            }

            .form-group {
                margin-bottom: 1.5rem;
            }

            .form-label {
                font-weight: 500;
                color: #003366;
            }

            .required:after {
                content: " *";
                color: #c62828;
            }

            .form-control:focus, .custom-select:focus {
                border-color: #5e87b0;
                -webkit-box-shadow: 0 0 0 0.25rem rgba(94, 135, 176, 0.25);
                box-shadow: 0 0 0 0.25rem rgba(94, 135, 176, 0.25);
            }

            .field-info {
                color: #555;
                font-size: 0.875rem;
                margin-top: 0.25rem;
            }

            .touch-input {
                height: 50px;
                font-size: 1.1rem;
            }

            .num-keypad {
                display: -ms-grid;
                display: grid;
                -ms-grid-columns: 1fr 10px 1fr 10px 1fr;
                grid-template-columns: repeat(3, 1fr);
                grid-gap: 10px;
                max-width: 300px;
                margin-top: 10px;
            }

            .num-key {
                width: 100%;
                height: 50px;
                font-size: 1.2rem;
                background-color: #f8f9fa;
            }

            .non-editable-field {
                background-color: #e9ecef;
                cursor: not-allowed;
            }

            /* IE11 Grid fallback for num-keypad */
        @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
                .num-keypad {
                    display: block;
                    overflow: hidden;
                }

                .num-key {
                    float: left;
                    width: 30%;
                    margin: 1.66%;
                }
            }
        </style>
}